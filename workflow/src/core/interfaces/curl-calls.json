1. First, let's register the BROWSER_USE task type:

curl -X POST http://localhost:3100/api/task-types \
  -H "Content-Type: application/json" \
  -d '{
    "type": "BROWSER_USE",
    "description": "Execute a browser task based on a prompt",
    "input": {
      "prompt": {
        "type": "string",
        "optional": false
      }
    },
    "output": {
      "url": {
        "type": "string",
        "optional": false
      }
    }
  }'

Create a workflow with a BROWSER_USE task:
curl -X POST http://localhost:3100/api/workflows \
  -H "Content-Type: application/json" \
  -d '{
    "name": "Test Workflow",
    "description": "A test workflow with a browser task",
    "tasks": [
      {
        "type": "BROWSER_USE",
        "description": "Navigate to Google and search for workflow engines",
        "input": {
          "prompt": "Go to Google and search for workflow engines"
        }
      }
    ]
  }'

The response from the workflow creation will include the workflow ID and task ID. Let's say it returns:
{
  "id": "workflow123",
  "tasks": [
    {
      "id": "task456",
      ...
    }
  ]
}

4. Now we can enqueue the task for execution:
curl -X POST http://localhost:3100/api/workflows/2696e14c-465a-4f9c-9c46-6a20f34b9f53/tasks/b4524d5a-bdcf-4b45-855e-028c80f99040/enqueue \
  -H "Content-Type: application/json" \
  -d '{
    "priority": 1
  }'


curl -X POST http://localhost:3100/api/queue/process-next \
  -H "Content-Type: application/json" \
  -d '{}'

{"name":"Test Workflow","description":"A test workflow with a browser task","tasks":[{"type":"BROWSER_USE","description":"Navigate to Google and search for workflow engines","input":{"prompt":"Go to Google and search for workflow engines"},"id":"9c26505f-fa70-4397-a6be-e83762b3ed91","status":"NOT_STARTED","createdAt":"2025-03-06T23:38:49.907Z","updatedAt":"2025-03-06T23:38:49.907Z"}],"id":"15090e50-fd24-4c1f-97c0-37e14caac0d3","status":"NOT_STARTED","createdAt":"2025-03-06T23:38:49.911Z","updatedAt":"2025-03-06T23:38:49.911Z"}


curl -X POST http://localhost:3100/api/workflows/15090e50-fd24-4c1f-97c0-37e14caac0d3/tasks/9c26505f-fa70-4397-a6be-e83762b3ed91/enqueue \
  -H "Content-Type: application/json" \
  -d '{
    "priority": 1
  }'


  curl http://localhost:3100/api/queue/status


You can monitor the task status:
curl http://localhost:3100/api/workflows/workflow123

And check the queue status:
status
Note: Replace workflow123 and task456 with the actual IDs returned from the workflow creation response.
The execution will start automatically since we have the task processing loop running in the background (it processes tasks every second).
To monitor the complete flow, you can run:
'
If you need to cancel the task at any point:
cancel
Would you like me to explain any part of these commands in more detail?